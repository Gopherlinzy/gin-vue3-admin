app:
#  应用名称
  name: "gohub"
#  当前环境，用以区分多环境，一般为 local, stage, production, test
  env: "local"
#  加密会话、JWT 加密
  key: "zBqYyQrPNaIUsnRhsGtHLivjqiMjBVLS"
#  是否进入调试模式
  debug: true
#  用以生成链接
  url: "http://localhost:8888"
#  应用服务端口
  port: "8888"
#  数据库类型:mysql(默认)|sqlite|sqlserver|postgresql
  db-type: "mysql"
#  设置时区，JWT 里会使用，日志记录里也会使用到
  timezone: "Asia/Shanghai"
#  API 域名，未设置的话所有 API URL 加 api 前缀，如 http://domain.com/api/v1/users
  api_domain: ""

log:
#  日志级别，必须是以下这些选项：
#  "debug" —— 信息量大，一般调试时打开。系统模块详细运行的日志，例如 HTTP 请求、数据库请求、发送邮件、发送短信
#  "info" —— 业务级别的运行日志，如用户登录、用户退出、订单撤销。
#  "warn" —— 感兴趣、需要引起关注的信息。 例如，调试时候打印调试信息（命令行输出会有高亮）。
#  "error" —— 记录错误信息。Panic 或者 Error。如数据库连接错误、HTTP 端口被占用等。一般生产环境使用的等级。
#  以上级别从低到高，level 值设置的级别越高，记录到日志的信息就越少
#  开发时推荐使用 "debug" 或者 "info" ，生产环境下使用 "error"
  level: "debug"
#  日志的类型，可选：
#  "single" 独立的文件
#  "daily" 按照日期每日一个
  type: "daily"
#  ------------------ 滚动日志配置 ------------------
#  日志文件路径
  filename: "storage/logs/logs.log"
#  每个日志文件保存的最大尺寸 单位：M
  max_size: 64
#  最多保存日志文件数，0 为不限，MaxAge 到了还是会删
  max_backup: 5
#  最多保存多少天，7 表示一周前的日志会被删除，0 表示不删
  max_age: 7
#  是否压缩，压缩日志不方便查看，我们设置为 false（压缩可节省空间）
  compress: false

mysql:
#  服务器地址:
  host: "127.0.0.1"
#  :端口
  port: "3306"
#  数据库名
  database: "gohub"
#  数据库用户名
  username: "root"
#  数据库密码
  password: "123456"
#  数据库编码
  charset: "utf8mb4"
#  空闲中的最大连接数
  max_idle_connections: 100
#  打开到数据库的最大连接数
  max_open_connections: 25
  max_life_seconds: 300

redis:
#  服务器地址:
  host: "127.0.0.1"
# 端口
  port: "6379"
#  用户
  username: ""
# 密码
  password: ""
#  业务类存储使用 1 (图片验证码、短信验证码、会话)
  database: 1
#  缓存 cache 包使用 0 ，缓存清空理应当不影响业务
  database_cache: 1

captcha:
#  验证码图片高度
  height: 80
#  验证码图片宽度
  width: 240
#  验证码的长度
  length: 6
#  过期时间，单位是分钟
  expire_time: 15
#  debug 模式下的过期时间，方便本地开发调试
  debug_expire_time: 10080
#  非 production 环境，使用此 key 可跳过验证，方便测试
  testing_key: "captcha_skip_test"
  digit:
    #  数字的最大倾斜角度
    maxskew: 0.7
    #  图片背景里的混淆点数量
    dotcount: 80
  string:
    source: "0123456789abcdefghjkmnoqrstuvxyz"

verifycode:
#  验证码的长度
  code_length: 6
#  过期时间，单位是分钟
  expire_time: 15

#  debug 模式下的过期时间，方便本地开发调试
  debug_expire_time: 10080
#  本地开发环境验证码使用 debug_code
  debug_code: "123456"

#  方便本地和 API 自动测试
  debug_phone_prefix: "000"
  debug_email_suffix: "@testing.com"
sms:
  aliyun:
#    秘钥 ID
    access_key_id: LTAI5t6y8mAdD4MUZf4h5qEh
#    秘钥密码
    access_key_secret: PCYdStD7x5rzNODf5HrKWagkUZDMrb
#    签名
    sign_name: 阿里云短信测试
#    模板
    template_code: SMS_154950909

#  Mailhog 的配置
mail:
  stmp:
#    服务器地址
    host: "127.0.0.1"
#    端口
    port: "1025"
    username: ""
    password: ""
  from:
#   发送者邮件地址
    address: "gohub@example.com"
#   发送人
    name: "Gohub"

jwt:
#  过期时间，单位是分钟，一般不超过两个小时
  expire_time: 120
#  允许刷新时间，单位分钟，86400 为两个月，从 Token 的签名时间算起
  max_refresh_time: 86400
#  debug 模式下的过期时间，方便本地开发调试
  debug_expire_time: 86400

paging:
#  默认每页条数
  perpage: 10
#  URL 中用以分辨多少页的参数
#  此值若修改需一并修改请求验证规则
  url_query_page: "page"
#  URL 中用以分辨排序的参数（使用 id 或者其他）
#  此值若修改需一并修改请求验证规则
  url_query_sort: "sort"
#  URL 中用以分辨排序规则的参数（辨别是正序还是倒序）
#  此值若修改需一并修改请求验证规则
  url_query_order: "order"
#  URL 中用以分辨每页条数的参数
#  此值若修改需一并修改请求验证规则
  url_query_per_page: "per_page"