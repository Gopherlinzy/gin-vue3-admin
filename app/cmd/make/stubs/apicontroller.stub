package v1

import (
    "github.com/Gopherlinzy/gin-vue3-admin/app/models/{{PackageName}}"
    "github.com/Gopherlinzy/gin-vue3-admin/app/requests"
    "github.com/Gopherlinzy/gin-vue3-admin/pkg/response"

    "github.com/gin-gonic/gin"
)

type {{StructNamePlural}}Controller struct {
    BaseApiController
}

// Index 显示 {{PackageName}} 列表
func (ctrl *{{StructNamePlural}}Controller) Index(c *gin.Context) {
    {{VariableNamePlural}} := {{PackageName}}.All()
    response.Data(c, {{VariableNamePlural}})
}

// Show 显示单个 {{PackageName}} 数据
func (ctrl *{{StructNamePlural}}Controller) Show(c *gin.Context) {
    request := requests.{{StructName}}IDRequest{}

	if bindOk := requests.Validate(c, &request, requests.{{StructName}}ID); !bindOk {
		return
	}
    {{VariableName}}Model := {{PackageName}}.Get(request.ID)

    response.Data(c, {{VariableName}}Model)
}

// Store 新建 {{PackageName}} 数据
func (ctrl *{{StructNamePlural}}Controller) Store(c *gin.Context) {

    request := requests.{{StructName}}SaveRequest{}
    if ok := requests.Validate(c, &request, requests.{{StructName}}Save); !ok {
        return
    }

    {{VariableName}}Model := {{PackageName}}.{{StructName}}{
        FieldName:      request.FieldName,
    }
    {{VariableName}}Model.Create()
    if {{VariableName}}Model.ID > 0 {
        response.Created(c, {{VariableName}}Model)
    } else {
        response.Abort500(c, "创建失败，请稍后尝试~")
    }
}

// Update 修改 {{PackageName}} 数据
func (ctrl *{{StructNamePlural}}Controller) Update(c *gin.Context) {

    request := requests.{{StructName}}SaveRequest{}

    if bindOk := requests.Validate(c, &request, requests.{{StructName}}Save); !bindOk {
        return
    }

    {{VariableName}}Model := {{PackageName}}.Get(request.ID)

    {{VariableName}}Model.FieldName = request.FieldName
    rowsAffected := {{VariableName}}Model.Save()
    if rowsAffected > 0 {
        response.Data(c, {{VariableName}}Model)
    } else {
        response.Abort500(c, "更新失败，请稍后尝试~")
    }
}

// Delete 删除 {{PackageName}} 数据
func (ctrl *{{StructNamePlural}}Controller) Delete(c *gin.Context) {

    // 表单验证
   	request := requests.{{StructName}}IDRequest{}

   	if bindOk := requests.Validate(c, &request, requests.{{StructName}}ID); !bindOk {
   		return
   	}

    {{VariableName}}Model := {{PackageName}}.Get(request.ID)

    rowsAffected := {{VariableName}}Model.Delete()
    if rowsAffected > 0 {
        response.Success(c)
        return
    }

    response.Abort500(c, "删除失败，请稍后尝试~")
}